// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`header render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AppHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Menu
        fixed="top"
        inverted={true}
      >
        <MenuItem
          className="borderless"
          header={true}
        >
          <Link
            replace={false}
            to="/"
          >
            <Image
              as="img"
              src="logo.png"
              ui={true}
              width="100px"
            />
          </Link>
        </MenuItem>
        <MenuItem>
          <Category />
        </MenuItem>
        <MenuItem
          className="header-right"
          position="right"
        >
          <LogIn
            button={
              <Button
                as="button"
                basic={true}
              >
                Giriş Yap
              </Button>
            }
          />
              yada    
          <Register
            button={
              <Button
                as="button"
                basic={true}
                color="green"
              >
                Kayıt Ol
              </Button>
            }
          />
        </MenuItem>
      </Menu>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <MenuItem
            className="borderless"
            header={true}
          >
            <Link
              replace={false}
              to="/"
            >
              <Image
                as="img"
                src="logo.png"
                ui={true}
                width="100px"
              />
            </Link>
          </MenuItem>,
          <MenuItem>
            <Category />
          </MenuItem>,
          <MenuItem
            className="header-right"
            position="right"
          >
            <LogIn
              button={
                <Button
                  as="button"
                  basic={true}
                >
                  Giriş Yap
                </Button>
              }
            />
                yada    
            <Register
              button={
                <Button
                  as="button"
                  basic={true}
                  color="green"
                >
                  Kayıt Ol
                </Button>
              }
            />
          </MenuItem>,
        ],
        "fixed": "top",
        "inverted": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Link
              replace={false}
              to="/"
            >
              <Image
                as="img"
                src="logo.png"
                ui={true}
                width="100px"
              />
            </Link>,
            "className": "borderless",
            "header": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Image
                as="img"
                src="logo.png"
                ui={true}
                width="100px"
              />,
              "replace": false,
              "to": "/",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": "img",
                "src": "logo.png",
                "ui": true,
                "width": "100px",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Category />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <LogIn
                button={
                  <Button
                    as="button"
                    basic={true}
                  >
                    Giriş Yap
                  </Button>
                }
              />,
              "    yada    ",
              <Register
                button={
                  <Button
                    as="button"
                    basic={true}
                    color="green"
                  >
                    Kayıt Ol
                  </Button>
                }
              />,
            ],
            "className": "header-right",
            "position": "right",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "button": <Button
                  as="button"
                  basic={true}
                >
                  Giriş Yap
                </Button>,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "    yada    ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "button": <Button
                  as="button"
                  basic={true}
                  color="green"
                >
                  Kayıt Ol
                </Button>,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Menu
          fixed="top"
          inverted={true}
        >
          <MenuItem
            className="borderless"
            header={true}
          >
            <Link
              replace={false}
              to="/"
            >
              <Image
                as="img"
                src="logo.png"
                ui={true}
                width="100px"
              />
            </Link>
          </MenuItem>
          <MenuItem>
            <Category />
          </MenuItem>
          <MenuItem
            className="header-right"
            position="right"
          >
            <LogIn
              button={
                <Button
                  as="button"
                  basic={true}
                >
                  Giriş Yap
                </Button>
              }
            />
                yada    
            <Register
              button={
                <Button
                  as="button"
                  basic={true}
                  color="green"
                >
                  Kayıt Ol
                </Button>
              }
            />
          </MenuItem>
        </Menu>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <MenuItem
              className="borderless"
              header={true}
            >
              <Link
                replace={false}
                to="/"
              >
                <Image
                  as="img"
                  src="logo.png"
                  ui={true}
                  width="100px"
                />
              </Link>
            </MenuItem>,
            <MenuItem>
              <Category />
            </MenuItem>,
            <MenuItem
              className="header-right"
              position="right"
            >
              <LogIn
                button={
                  <Button
                    as="button"
                    basic={true}
                  >
                    Giriş Yap
                  </Button>
                }
              />
                  yada    
              <Register
                button={
                  <Button
                    as="button"
                    basic={true}
                    color="green"
                  >
                    Kayıt Ol
                  </Button>
                }
              />
            </MenuItem>,
          ],
          "fixed": "top",
          "inverted": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Link
                replace={false}
                to="/"
              >
                <Image
                  as="img"
                  src="logo.png"
                  ui={true}
                  width="100px"
                />
              </Link>,
              "className": "borderless",
              "header": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Image
                  as="img"
                  src="logo.png"
                  ui={true}
                  width="100px"
                />,
                "replace": false,
                "to": "/",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "as": "img",
                  "src": "logo.png",
                  "ui": true,
                  "width": "100px",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Category />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <LogIn
                  button={
                    <Button
                      as="button"
                      basic={true}
                    >
                      Giriş Yap
                    </Button>
                  }
                />,
                "    yada    ",
                <Register
                  button={
                    <Button
                      as="button"
                      basic={true}
                      color="green"
                    >
                      Kayıt Ol
                    </Button>
                  }
                />,
              ],
              "className": "header-right",
              "position": "right",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "button": <Button
                    as="button"
                    basic={true}
                  >
                    Giriş Yap
                  </Button>,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "    yada    ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "button": <Button
                    as="button"
                    basic={true}
                    color="green"
                  >
                    Kayıt Ol
                  </Button>,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
